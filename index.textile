---
layout: default
title: A modern approach to remote javascript
---

Keep the browser logic-less.

Rbjs is a ruby gem that enables you to write remote javascript in Rails 3 or higher. With Rbjs you can render your javascript dynamically on the server and send it back to the client. Use it to quickly prototype your ajax actions. It saves you from the pain of dealing with response handlers and all the fiddly stuff. And once your app gets more javascript-heavy, you can migrate to a sophisticated client library, like "backbone":http://documentcloud.github.com/backbone/.

h2(#example).  Show me an example

This example renders a link that - after being clicked - will alert the user with a greeting. Find more examples in the "quick start guide":quick_start.html and learn how to use _.rbjs_ templates.

{% highlight ruby %}
# controllers/greeter_controller.rb
def greet_me
  render :js do
    window.alert "Hi there, #{current_user.name}!"
  end
end

# views/greeter/index.html.erb
link_to "Greet me!", "/greeter/greet_me", :remote => true
{% endhighlight %}

h2(#uhm). Uhm...

Wait. Isn't rjs considered obtrusive?

Yes. You wouldn't use this for rich clients and javascript-heavy apps. Use "backbone":http://documentcloud.github.com/backbone/ instead. This is targeted at simple ajax stuff. You know, keeping simple stuff simple.

h2(#people).  What people* say

"Pragmatic Developer":http://www.google.com:

bq. Rbjs lets me prototype my ajax actions very quickly. I don't have to think about dealing with JSON response handlers. It's making my life easier.

"Lazy Developer":http://www.google.com:

bq. In the days of sophisticated client-side libraries like Backbone.js one easily forgets about good old rjs for the simple stuff. I don't always want to build a full-fledged MVC app on the client. With Rbjs I can keep my javascript on the server and my browser stays logic-less.

"Clever Developer":http://www.google.com:

bq. It's so nice to have Rbjs around. It's like having a friend with superpowers. Although I work on a javascript-heavy client, I like to fall back to rjs for the parts of my app that aren't covered by the client's logic (yet).

"Crazy Developer":http://www.google.com:

bq. When does the narwhal bacon?

h2(#features). Features

* Stuff

So let's "get started":quick_start.html.


h2(#news).  What's New

New in Rbjs 0.9.14:

* Javascript translation for ruby constants

New in Rbjs 0.9.13:

* First public release


h2(#notices).  Credits & Notices

"prototype-rails":https://github.com/rails/prototype-rails, the famous rjs library.

"ColorCons":http://www.mouserunner.com/Spheres_ColoCons1_Free_Icons.html, copyright of Ken Saunders.  "DejaVu fonts":http://dejavu.sourceforge.net, copyright of Bitstream, Inc.

Documentation built with "jekyll":http://jekyllrb.com, based on the design by the "apache buildr":http://buildr.apache.org project.

If you like this gem, say hi on "twitter":http://twitter.com/#!buhrmii

*as in mostly me.
